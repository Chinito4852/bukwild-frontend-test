{"version":3,"sources":["abc_logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","props","useState","pages","title","headline","setHeadline","blocks","setBlocks","background","backgroundName","setBackgroundName","useEffect","document","body","style","backgroundImage","process","renderPageList","className","map","page","key","onClick","changePage","src","logo","subhead","cta","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","content","getElementById"],"mappings":"isCAAe,MAA0B,qC,eCmI1BA,MA/Hf,SAAaC,GAAO,MAQcC,mBAASD,EAAME,MAAM,GAAGC,OARtC,mBAQXC,EARW,KAQDC,EARC,OASUJ,mBAASD,EAAME,MAAM,GAAGI,QATlC,mBASXA,EATW,KASHC,EATG,OAU0BN,mBAASD,EAAME,MAAM,GAAGI,OAAO,GAAGE,YAV5D,mBAUXC,EAVW,KAUKC,EAVL,KAclBC,qBAAU,WAERC,SAASC,KAAKC,MAAMC,gBAApB,cAA6CC,yBAA7C,wBAAmFP,EAAnF,QAIF,IAiBMQ,EAAiB,WACrB,OACE,oBAAIC,UAAU,YAAd,SACGlB,EAAME,MAAMiB,KAAI,SAACC,EAAMC,GACtB,OACE,6BACE,sBAAMH,UAAYd,IAAagB,EAAKjB,MAAS,SAAW,GAClDmB,QAAS,YAxBR,SAACF,GAClBf,EAAYe,EAAKjB,OACjBI,EAAUa,EAAKd,QACfI,EAAkBU,EAAKd,OAAO,GAAGE,YAqBDe,CAAWH,IADjC,SAEGA,EAAKjB,gBAyDpB,OACE,qBAAKe,UAAU,MAAf,SAEE,sBAAKA,UAAU,WAAf,UAEE,sBAAKA,UAAU,QAAf,UA9EF,sBAAKA,UAAU,YAAf,UACE,qBAAKM,IAAKC,IACTR,OA0BH,qBAAKC,UAAU,UAAf,SACE,wBAAQA,UAAU,cAAlB,6BAsDA,sBAAKA,UAAU,QAAf,UA9CF,qBAAKA,UAAU,WAAf,SACE,oBAAIA,UAAU,eAAd,SAA8BZ,EAAO,GAAGF,aAQ1C,qBAAKc,UAAU,UAAf,SACE,mBAAGA,UAAU,cAAb,SAA4BZ,EAAO,GAAGoB,eAyCtC,sBAAKR,UAAU,QAAf,UAjCF,qBAAKA,UAAU,cAAf,SACE,6BAAKZ,EAAO,GAAGqB,QAQjB,qBAAKT,UAAU,WAAf,SACE,mDAAqB,sBAAMA,UAAU,aAAhB,kCCtFdU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAKrC,MAAOsC,EAAQtC,UAEtBU,SAAS6B,eAAe,SAM1Bb,M","file":"static/js/main.33714b61.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/abc_logo.c72ca4e0.svg\";","import React, {useState, useEffect} from 'react';\nimport logo from './abc_logo.svg';\nimport './App.css';\n\nfunction App(props) {\n\n  // The state of the component is kept by the headline, blocks, and backgroundName variables.\n  // The headline variable stores the headline of the current page. The blocks variable stores\n  // all the content to be displayed on the current page, and the backgroundName stores the \n  // name of the background image to be used. These state variables will be initialized when\n  // the component loads and changed by a handler function called when an item on the list of\n  // pages is clicked.\n  const [headline, setHeadline] = useState(props.pages[0].title);\n  const [blocks, setBlocks] = useState(props.pages[0].blocks);\n  const [backgroundName, setBackgroundName] = useState(props.pages[0].blocks[0].background);\n\n  // Function that is called when state variables are changed. Used for changing the page's\n  // background image in this component.\n  useEffect(() => {\n    //console.log(backgroundName);\n    document.body.style.backgroundImage = `url(${process.env.PUBLIC_URL}/backgrounds/${backgroundName})`;\n  });\n\n  // Handler function for changing pages. Will be called by clicking on page list items\n  const changePage = (page) => {\n    setHeadline(page.title);\n    setBlocks(page.blocks);\n    setBackgroundName(page.blocks[0].background);\n  }\n\n  // Renders the page logo and list of pages in the component\n  const renderLogoAndPageList = () => {\n    return (\n      <div className=\"list-logo\">\n        <img src={logo}></img>\n        {renderPageList()}\n      </div>\n    );\n  }\n\n  // Renders the list of pages. Called by renderLogoAndPageList()\n  const renderPageList = () => {\n    return (\n      <ul className=\"page-list\">\n        {props.pages.map((page, key) => {\n          return (\n            <li>\n              <span className={(headline === page.title) ? \"active\" : \"\"} \n                    onClick={() => {changePage(page)}}>\n                {page.title}\n              </span>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n\n  // Renders the \"Contact Us\" button\n  const renderContactButton = () => {\n    return (\n      <div className=\"contact\">\n        <button className=\"contact-btn\">Contact Us</button>\n      </div>\n    );\n  }\n\n  // Renders the page headline\n  const renderHeadline = () => {\n    return (\n      <div className=\"headline\">\n        <h1 className=\"headline-txt\">{blocks[0].headline}</h1>\n      </div>\n    );\n  }\n\n  // Renders the page subhead\n  const renderSubHead = () => {\n    return (\n      <div className=\"subhead\">\n        <p className=\"subhead-txt\">{blocks[0].subhead}</p>\n      </div>\n    );\n  }\n\n  // Renders the call to action content\n  const renderCallToAction = () => {\n    return (\n      <div className=\"cta-content\">\n        <h3>{blocks[0].cta}</h3>\n      </div>\n    );\n  }\n\n  // Renders the \"Let's talk\" section of the call to action\n  const renderTalk = () => {\n    return (\n      <div className=\"cta-talk\">\n        <h6>Let's Talk.&emsp;<span className=\"talk-arrow\">&rarr;</span></h6>\n      </div>\n    );\n  }\n\n  // Elements in this component are grouped in three rows. The logo, page list, and contact button\n  // are grouped in the first row, the headline and subhead in the second, and the call to action\n  // in the thrid.\n  return (\n    <div className=\"App\"\n         >\n      <div className=\"app-body\">\n\n        <div className=\"row-1\">\n          {renderLogoAndPageList()}\n          {renderContactButton()}\n        </div>\n  \n        <div className=\"row-2\">\n          {renderHeadline()}\n          {renderSubHead()}\n        </div>\n        \n        <div className=\"row-3\">\n          {renderCallToAction()}\n          {renderTalk()}\n        </div>\n        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport content from './content.json';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App pages={content.pages}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}